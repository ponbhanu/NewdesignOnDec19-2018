
.my-drop-zone {
    border: dotted 3px lightgray;
}

.nv-file-over {
    border: dotted 3px red;
}

/* Default class applied to drop zones on over */

.another-file-over-class {
    border: dotted 3px green;
}

.bar-grn {
    width: 1%;
    height: 20px;
    background-color: #4CAF50;
    }
.bar-red {
width: 1%;
height: 20px;
background-color:red;
}
#failBar {
    width: 1%;
    height: 20px;
    background-color: #4CAF50;
    }


html,
body {
    height: 100%;
}

table,
th,
td {
    border: 1px solid black;
    border-collapse: collapse;
}

.text-center {
    text-align: center
}
.pad50 {
    padding-top:50px;
}
.success-mark {
    color: green;
}
.fail-mark {
    color: red;
}
.padd80 {
    padding-top:80px;
}
.marTop10 {
    margin-top:10px;
}
.marTop30 {
    margin-top:30px !important;
}
.marTop50 {
    margin-top:50px !important;
}
.marTop70 {
    margin-top:70px !important;
}
.btn-width {
    width:100px;
}
.paddTop20{
    padding-top: 20px;
}
.padding-btm100 {
    padding-bottom: 100px !important;
}
.analytics {
    padding-left: 30px;
    margin-top: 20px;
}
.mtop30 {
    margin-top: 30px;
}.marBot30 {
    margin-bottom: 30px;
}
.tabBgColor {
    background-color: lightblue !important;
}
.tabsOuterLine {
    border: 1px solid #eee;
}
* {box-sizing: border-box}
body {font-family: "Lato", sans-serif;}

/* Style the tab */
.tab {
    float: left;
    border: 1px solid #ccc;
    background-color: white;
    width: 15%;
    height: 1200px;
}

/* Style the buttons inside the tab */
.tab button {
    display: block;
    background-color: inherit;
    color: black;
    padding: 22px 16px;
    width: 100%;
    border: none;
    outline: none;
    text-align: left;
    cursor: pointer;
    transition: 0.3s;
    font-size: 17px;
}

/* Change background color of buttons on hover */
.tab button:hover {
    background-color: #ddd;
}

/* Create an active/current "tab button" class */
.tab button.active {
    background-color: #ccc;
}

/* Style the tab content */
.tabcontent {
    float: left;
    padding: 0px 12px;
    border: 1px solid #ccc;
    width: 85%;
    border-left: none;
    height: 1200px;
}
.tabsBgColor {
    background-color: rgb(101, 115, 119) !important;
}
.text-center{
    text-align: center;

}
.navbar-header {
  float: left;
  padding: 15px;
  text-align: center;
  width: 100%;
}
.navbar-brand {float:none;}

/*import { Component, ViewContainerRef } from '@angular/core';
import { Http, Headers } from '@angular/http';
import * as $ from 'jquery';
import { ToasterService } from 'angular2-toaster';
import {TableModule} from 'primeng/table';
import { HttpService } from './http.service';
import { CodegenComponentFactoryResolver } from '@angular/core/src/linker/component_factory_resolver';
import { DatePipe } from '@angular/common';


@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  providers: [HttpService]
})
export class AppComponent {
  files: any = [];
  list: any = [];
  taskId: any ;
  rfpId: any;
  radioSelected: any
  width: any;
  isTrue: any;
  id: any;
  uploaderProgressBarVal:any = 1;
  ocrProgressBarVal:any = 1;
  mlProgressBarVal:any = 1;
  selectedFiles: any = [];
  checkedFiles: any = [];
  analyticsData: any = [];
  isCheckBoxClicked: any = false;
  isRadioClicked: any = false;
  disabled: any = true;
  toSearchDate: any;
  fileUploadTab:any = true;
  ocrTab:any;
  mlTab:any;
  clFile:any = [];
  refFile:any = [];
  filesToUpload:any = [];
  assignmentTab:any = false;
  feedBackTab: any = false;
  isExecuteMl:any = false;
  execOcrStatus:any = false;
  execMlStatus:any = false;
  uploadingMessage:any = '';
  isClauseFileUploaded:any = false;
  ocrStatusList: any =  [{'status':'split','success':false},{'status':'ocr','success':false},{'status':'model','success':false},{'status':'xls','success':false},{'status':'filter1','success':false},{'status':'csv','success':false},{'status':'ml','success':false}];
  mlStatusList: any = [{'status':'status','success':false}];
  analyticsTab: Boolean;
  constructor(public toasterService: ToasterService, public httpService:HttpService, private datePipe: DatePipe) {
    this.disableUploadbutton = false;
    this.uploadingMessage = null;
    this.analyticsData = this.getDates();
    this.currentDate = new Date();
    this.currentDate =this.datePipe.transform(this.currentDate,"yyyy-MM-dd");
  }
  disableUploadbutton: Boolean = false;
  todaysDownload: string;
  monthsDownload:number;
  weeksDownload: string;
  currentDate;

  onChange(data) {
    //this.uploadingMessage = '';
    this.files = [];
    this.selectedFiles = [];
    if (data && data.target && data.target.files && data.target.files.length) {
      var totalFiles = data.target.files;
      for (var i = 0; i < totalFiles.length; i++) {
        this.files.push({ 'id': Math.random(), 'name': totalFiles[i].name, 'size': totalFiles[i].size, 'image': totalFiles[i], 'number': 1 + i });
      }
    }
  }

  

  manipulateDates(){
    let downloads = this.getDates();
    let today: any = new Date();
    this.monthsDownload = 0;
    //this.datePipe.transform(today, 'mm-dd-yyyy');
    //console.log(this.datePipe.transform(today,"MM-dd-yyyy"));
    downloads.forEach((element)=>{
      // Day's count
      if(element.date === this.datePipe.transform(today,"MM-dd-yyyy")){
        this.todaysDownload = element.count+''; 
      }
      //Months count
      if(today.getMonth()+1 + '' === element.date.split('-')[0] ){
        this.monthsDownload += element.count;
      };
      // weeks count is set explicitly 
      this.weeksDownload = '60';
    });
    return this.todaysDownload;
  }

  
  onSelectDate() {
    this.analyticsData = this.getDates();
    this.toSearchDate = this.toSearchDate.toLocaleDateString("en-US").replace('/','-').replace('/','-');
    if (this.toSearchDate)
      this.analyticsData = this.analyticsData.filter((item) => item.date == this.toSearchDate);
  }  

  uploadFiles(type: any, i: any, selectedFiles) {
//    this.id = i;
    var file = '',
      toFindId = '',
      filesToUpload = [];
      let formData: FormData = new FormData();
    if (selectedFiles && selectedFiles.length && selectedFiles.length > 0) {
  
      for (var j = 0; j < this.selectedFiles.length; j++) {
        toFindId = this.selectedFiles[i].id;
        formData.append('file',this.selectedFiles[j].image);
            }
    } else {
      this.toasterService.pop('error', 'Please select files to upload');
      return;
    }
    if (!this.isRadioClicked) {
      this.toasterService.pop('error', 'Please select the primary file');
      return;
    }
  
    var headers = getHeaders();
    for (var k = 0; k < this.files.length; k++) {
      if (this.files[k].isPrimary) {
        if (selectedFiles.indexOf(this.files[k]) > -1) {
          headers.append('primary', this.files[k].name);
          k = this.files.length;
        } else {
          this.toasterService.pop('error', 'Primary file must be a selected file');
          return;
        }
      }
    };
    localStorage.clear();
    this.callLoader('upload', 10);
    this.disableUploadbutton =true;
    this.uploadingMessage = 'Uploading Started .....';
    this.httpService.manageHttp('post', 'http://104.211.60.4222:8080/rfp/ic/yankees/upload/', formData, headers)
      .subscribe(response => {
        if (response.resultCode === 'OK') {
          var res = response,
            lotNumber,
            headers = new Headers();
          let formData: FormData = new FormData();
          lotNumber = res.resultObject[0].lotNumber;
          this.uploadingMessage = 'Uploaded...!';
          this.callLoader('upload', 65);
          for (var j = 0; j < this.files.length; j++) {
            //if (this.files[j].id === toFindId) {
              this.files[j].status = 'success';
            //}
          }
 this.httpService.manageHttp('post', 'http://104.211.60.4222:8080/rfp/ic/yankees/store/' + lotNumber, formData, headers)
            .subscribe(response => {
              if (response.resultCode && response.resultCode === 'OK') {
                 this.assignRfpId(response);
                 localStorage.setItem('rfpId', this.rfpId);
  
                 this.isExecuteMl = true;
                 this.selectedFiles = [];
                this.toasterService.pop('success', 'All files uploaded successfully');
                 this.execOcrStatus = true;
                 this.callLoader('upload', 100);
                 this.execOcrStatuses();
                 setTimeout(() => {
                   this.execMlStatus = true;
                 }, 3000);
               }
             });          var id = this.id + 1;
           if (selectedFiles && selectedFiles.length && selectedFiles.length > 0) {
            
        
              
          
          }
        } else if (response.resultCode === 'KO') {
              this.files[this.id].status = 'fail';
              for (var j = 0; j < this.files.length; j++) {
                if (this.files[j].id === toFindId) {
                  this.files[j].status = 'fail';
                }
              }
              this.toasterService.pop('error', 'Files uploading has been stopped');
            }
          });
  };
  
   


  callLoader(type,val) {
    if (type === 'upload') {
      this.uploaderProgressBarVal = val;
    } else if (type === 'ocr') {
      this.ocrProgressBarVal = val;
    } else if (type === 'ml') {
      this.mlProgressBarVal = val;
    }
  }


  onClickRadio(data) {
    this.isRadioClicked = true;
    for (var i = 0; i < this.files.length; i++) {
      if (this.files[i].id === data.id) {
        this.files[i].isPrimary = true;
      }
    }
  }

  onClickCheckBox(file) {
    if (this.selectedFiles.indexOf(file) > -1) {
      this.selectedFiles.splice(file, 1);
    } else {
      this.selectedFiles.push(file);
    }
  }

  cancel() {
    this.files = [];
  }

  manageActions(id, type) {
    if (type === 'delete') {
      this.files = this.files.filter((item) => item.id !== id);
    } 
  }

  uploadAllFiles() {
    this.uploadFiles('multiple', 0, this.selectedFiles);
  }

  execOcrStatuses(){
    let formData: FormData = new FormData();
    formData.append('Content-Type', 'application/json');
    this.callLoader('ocr',10);
    this.httpService.manageHttp('post','http://104.211.60.4222:8080/rfp/ic/yankees/split/'+this.rfpId, formData, getHeaders())
    .subscribe(response => {
      if (response.resultCode && response.resultCode === 'OK') {
        this.callLoader('ocr',20);
        this.ocrStatusList[0].success = true;
        this.assignRfpId(response);
        this.httpService.manageHttp('post','http://104.211.60.4222:8080/rfp/ic/yankees/ocr/'+this.rfpId,formData, getHeaders())
        .subscribe(response => {
          if (response.resultCode && response.resultCode === 'OK') {
            this.callLoader('ocr',30);
            this.ocrStatusList[1].success = true;
            this.assignRfpId(response);
            this.httpService.manageHttp('post','http://104.211.60.4222:8080/rfp/ic/yankees/model/'+this.rfpId,formData, getHeaders())
            .subscribe(response => {
              if (response.resultCode && response.resultCode === 'OK') {
                this.callLoader('ocr',40);
                this.ocrStatusList[2].success = true;
                this.assignRfpId(response);
                this.httpService.manageHttp('post','http://104.211.60.4222:8080/rfp/ic/yankees/xls/'+this.rfpId,formData, getHeaders())
                .subscribe(response => {
                  if (response.resultCode && response.resultCode === 'OK') {
                    this.callLoader('ocr',50);
                    this.ocrStatusList[3].success = true;
                    this.assignRfpId(response);
                    this.httpService.manageHttp('post','http://104.211.60.4222:8080/rfp/ic/yankees/filter1/'+this.rfpId,formData, getHeaders())
                    .subscribe(response => {
                      if (response.resultCode && response.resultCode === 'OK') {
                        this.callLoader('ocr',70);
                        this.ocrStatusList[4].success = true;
                        this.assignRfpId(response);
                        this.httpService.manageHttp('post','http://104.211.60.4222:8080/rfp/ic/yankees/csv/'+this.rfpId,formData, getHeaders())
                    .subscribe(response => {
                      if (response.resultCode && response.resultCode === 'OK') {
                        this.callLoader('ocr',85);
                        this.ocrStatusList[5].success = true;
                        this.assignRfpId(response);
                        this.httpService.manageHttp('post','http://104.211.60.4222:8080/rfp/ic/yankees/ml/'+this.rfpId,formData, getHeaders())
                        .subscribe(response => {
                          if (response.resultCode && response.resultCode === 'OK') {
                              this.taskId= response.resultObject[0].taskId;
                              localStorage.setItem('taskId',this.taskId);
                              this.ocrStatusList[6].success = true;
                              this.callLoader('ocr',100);
                               this.toasterService.pop('success', 'ml is completed')
                          this.asyncMlPredict();
                        } else {
                            this.toasterService.pop('error', 'Status failed at ml');
                          }
                        });
                        
                        this.toasterService.pop('success', 'csv is completed');
                  } else {
                    this.toasterService.pop('error', 'Status failed at CSV');
                  }
                });
                     this.toasterService.pop('success', 'filter is completed');
                  } else {
                    this.toasterService.pop('error', 'Status failed at filter');
                  }
                });
                    this.toasterService.pop('success', 'model is completed');
                  } else {
                    this.toasterService.pop('error', 'Status failed at CSV');
                  }
                });
               
              } else {
                this.toasterService.pop('error', 'Status failed at CSV');
              }
            });
        } else {
          this.toasterService.pop('error', 'Status failed at RFP');
        }
      });
      } 
      
      else {
       this.toasterService.pop('error', 'Status failed at getting Split');
      }
    });
    };
  
    asyncMlPredict(){
      this.callLoader('ml',35);
      // Call Status API repeteadly until staus is 'completed'
       var handle = setInterval(() => {
          this.httpService.manageHttp('get','http://13.72.70.226/textclassifier/task/'+this.taskId+'/status','',getHeaders())
          .subscribe(response => {
            if (response.resultCode && response.resultCode === 'OK') {
               this.callLoader('ml',20);         
               if(response.resultObj.status === 'completed') {
                this.callLoader('ml',100);
                this.mlStatusList[0].success = true;
                this.disableUploadbutton = false;
                 clearInterval(handle);
               }
            } else {
              this.mlStatusList[0].success = false;
              this.taskId = '';
              this.toasterService.pop('error', 'Status failed at getting TaskId');
            }
          });
        }, 2000);
    };

  onSubmitClauseIdForm(){
    var file = '';
    let formData: FormData = new FormData();
    formData.append('file', this.clFile[0].file);
    this.httpService.manageHttp('post',' http://icml-docker.cloudapp.net/textclassifier/feedback/upload',formData, getHeaders())
    .subscribe(response => {
      if (response.resultCode && response.resultCode === 'OK') {
        ///this.toasterService.pop('success','clauseId file uploaded successfully');
        this.isClauseFileUploaded = true;
         
      } else{ 
              this.toasterService.pop('error', 'clauseId file not uploaded');
      }
    });
  };
  
  uploadClFile(data) {
    if (data && data.target && data.target.files && data.target.files.length) {
      this.clFile.push({'file':data.target.files[0]});
    }
  };

  onSubmitFeedBackForm(){
    let formData: FormData = new FormData();
    formData.append('file',this.refFile[0]);
    var fileName = this.refFile[0].name;
    var body = {'fileName': fileName};
    this.httpService.manageHttp('post',' http://icml-docker.cloudapp.net/textclassifier/feedback/upload',formData, getHeaders())
    .subscribe(response => {
      if (response.resultCode && response.resultCode === 'OK') {
        this.httpService.manageHttp('post','http://icml-docker.cloudapp.net/textclassifier/feedback/process',body, getHeaders())
        .subscribe(response => {
          if (response.resultCode && response.resultCode === 'OK') { 
            var taskId =response.resultObj.taskId;
            this.httpService.manageHttp('get',' http://13.72.70.226/textclassifier/task/'+taskId+'/status','', getHeaders())
            .subscribe(response => {
              if (response.resultCode && response.resultCode === 'OK') {
                this.toasterService.pop('success', 'Feedback form uploaded successfully');
              } else {
                this.toasterService.pop('error', 'uploaded failed');
              }
            });
        } else {
          this.toasterService.pop('error', 'process failed');
        }
      });
      } else {
        this.toasterService.pop('error', 'process failed at ml');
      }
    });
  };
  
  assignRfpId (response) {
    this.rfpId = response.resultObject[0].rfpInputId;
  }
  
   
  closeModal() {
    this.analyticsData = this.getDates();
    this.toSearchDate = '';
  }

  uploadRefFile(data) {
    if (data && data.target && data.target.files && data.target.files.length) {
      this.refFile.push(data.target.files[0]);
    }
  
  };
  onClickTabs(tabId) {
    //Variables to show different tabs
    this.assignmentTab = false;
      this.fileUploadTab = false;
      this.ocrTab = false;
      this.mlTab = false;
      this.feedBackTab = false;
      this.analyticsTab = false;

    this.emptyFiles();+
    var tabsArr = ['fileUploadTab','ocrTab','mlTab','analyticsTab','feedBackTab','assignmentTab'],
    index = tabsArr.indexOf(tabId);
    tabsArr.splice(index,1);
    for (var i = 0;i< tabsArr.length;i++){
      $('#'+tabsArr[i]).removeClass('tabsBgColor');
    };
    $('#'+tabId).addClass('tabsBgColor');
    if (tabId === 'fileUploadTab') {
      this.fileUploadTab = true;
    } else if (tabId === 'ocrTab') {
      this.ocrTab = true;
    } else if (tabId === 'mlTab') {
      this.mlTab = true;
    } else if (tabId === 'assignmentTab') {
      this.assignmentTab = true;
    } else if (tabId === 'feedBackTab') {
      this.feedBackTab = true;
    }
    else if(tabId === 'analyticsTab'){
      this.analyticsTab = true;
    }
  };

  emptyFiles(){
    this.files = [];
    this.list =[];
    this.selectedFiles = [];
  };
}


export function getHeaders() {
  var headers = new Headers();
  return headers;
}
*/
.list-group-item {
  background-color: #e6e6e6;
  border: 1px solid #c5c5c5;
}